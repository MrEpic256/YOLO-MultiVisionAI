"""
üéØ –°–∫—Ä–∏–ø—Ç –¥–ª—è –Ω–∞–≤—á–∞–Ω–Ω—è –º–æ–¥–µ–ª—ñ YOLOv8 –Ω–∞ –¥–∞—Ç–∞—Å–µ—Ç—ñ Microsoft COCO
–î–µ—Ç–µ–∫—Ü—ñ—è –æ–±'—î–∫—Ç—ñ–≤: 80 –∫–ª–∞—Å—ñ–≤ (–ª—é–¥–∏, –∞–≤—Ç–æ–º–æ–±—ñ–ª—ñ, —Ç–≤–∞—Ä–∏–Ω–∏, –ø—Ä–µ–¥–º–µ—Ç–∏ —Ç–∞ —ñ–Ω.)
"""

import os
import torch
from ultralytics import YOLO
from pathlib import Path
import yaml

def check_environment():
    """–ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —Å–µ—Ä–µ–¥–æ–≤–∏—â–∞ —Ç–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—ñ GPU"""
    print("=" * 60)
    print("üîç –ü–ï–†–ï–í–Ü–†–ö–ê –°–ï–†–ï–î–û–í–ò–©–ê")
    print("=" * 60)
    
    # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ CUDA
    cuda_available = torch.cuda.is_available()
    print(f"CUDA –¥–æ—Å—Ç—É–ø–Ω–∏–π: {'‚úÖ –¢–∞–∫' if cuda_available else '‚ùå –ù—ñ'}")
    
    if cuda_available:
        print(f"GPU: {torch.cuda.get_device_name(0)}")
        print(f"CUDA –≤–µ—Ä—Å—ñ—è: {torch.version.cuda}")
        print(f"–ü–∞–º'—è—Ç—å GPU: {torch.cuda.get_device_properties(0).total_memory / 1024**3:.2f} GB")
    else:
        print("‚ö†Ô∏è –ù–∞–≤—á–∞–Ω–Ω—è –±—É–¥–µ –≤–∏–∫–æ–Ω—É–≤–∞—Ç–∏—Å—è –Ω–∞ CPU (–ø–æ–≤—ñ–ª—å–Ω–æ)")
    
    print()
    return cuda_available

def train_model():
    """–û—Å–Ω–æ–≤–Ω–∞ —Ñ—É–Ω–∫—Ü—ñ—è –Ω–∞–≤—á–∞–Ω–Ω—è"""
    
    # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —Å–µ—Ä–µ–¥–æ–≤–∏—â–∞
    use_gpu = check_environment()
    
    # –ü–∞—Ä–∞–º–µ—Ç—Ä–∏ –Ω–∞–≤—á–∞–Ω–Ω—è
    config = {
        'model': 'yolov8n.pt',  # nano –º–æ–¥–µ–ª—å (–º–æ–∂–Ω–∞ –∑–º—ñ–Ω–∏—Ç–∏ –Ω–∞ yolov8m.pt –∞–±–æ yolov8l.pt)
        'data': 'coco_dataset.yaml',
        'epochs': 10,
        'imgsz': 640,
        'batch': 16,
        'device': 0 if use_gpu else 'cpu',
        'workers': 8,
        'project': 'runs/detect',
        'name': 'coco_yolov8_train',
        'patience': 50,  # —Ä–∞–Ω–Ω—ñ–π —Å—Ç–æ–ø –ø—ñ—Å–ª—è 50 –µ–ø–æ—Ö –±–µ–∑ –ø–æ–∫—Ä–∞—â–µ–Ω–Ω—è
        'save': True,
        'save_period': 10,  # –∑–±–µ—Ä—ñ–≥–∞—Ç–∏ —á–µ–∫–ø–æ—ñ–Ω—Ç –∫–æ–∂–Ω—ñ 10 –µ–ø–æ—Ö
        'verbose': True,
        'plots': True,
    }
    
    print("=" * 60)
    print("üìã –ü–ê–†–ê–ú–ï–¢–†–ò –ù–ê–í–ß–ê–ù–ù–Ø")
    print("=" * 60)
    for key, value in config.items():
        print(f"{key:15s}: {value}")
    print()
    
    # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –∫–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ–π–Ω–æ–≥–æ —Ñ–∞–π–ª—É
    if not Path(config['data']).exists():
        print(f"‚ùå –ü–æ–º–∏–ª–∫–∞: —Ñ–∞–π–ª {config['data']} –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ!")
        return
    
    # –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –∫–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—ó –¥–∞—Ç–∞—Å–µ—Ç—É
    with open(config['data'], 'r', encoding='utf-8') as f:
        dataset_config = yaml.safe_load(f)
    
    print("=" * 60)
    print("üìä –Ü–ù–§–û–†–ú–ê–¶–Ü–Ø –ü–†–û –î–ê–¢–ê–°–ï–¢")
    print("=" * 60)
    print(f"–î–∞—Ç–∞—Å–µ—Ç: Microsoft COCO 2017")
    print(f"–ö—ñ–ª—å–∫—ñ—Å—Ç—å –∫–ª–∞—Å—ñ–≤: {dataset_config['nc']}")
    print(f"–¢—Ä–µ–Ω—É–≤–∞–ª—å–Ω–∏–π –Ω–∞–±—ñ—Ä: {config['data']}")
    print(f"–í–∞–ª—ñ–¥–∞—Ü—ñ–π–Ω–∏–π –Ω–∞–±—ñ—Ä: {config['data']}")
    print()
    
    # –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è –º–æ–¥–µ–ª—ñ
    print("=" * 60)
    print("üöÄ –ü–û–ß–ê–¢–û–ö –ù–ê–í–ß–ê–ù–ù–Ø")
    print("=" * 60)
    print(f"–ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –º–æ–¥–µ–ª—ñ: {config['model']}")
    
    try:
        model = YOLO(config['model'])
        
        # –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è data augmentation
        augmentation = {
            'hsv_h': 0.015,      # Hue augmentation
            'hsv_s': 0.7,        # Saturation augmentation
            'hsv_v': 0.4,        # Value augmentation
            'degrees': 0.0,      # Rotation (+/- deg)
            'translate': 0.1,    # Translation (+/- fraction)
            'scale': 0.5,        # Scale (+/- gain)
            'shear': 0.0,        # Shear (+/- deg)
            'perspective': 0.0,  # Perspective (+/- fraction)
            'flipud': 0.0,       # Vertical flip (probability)
            'fliplr': 0.5,       # Horizontal flip (probability)
            'mosaic': 1.0,       # Mosaic augmentation (probability)
            'mixup': 0.0,        # MixUp augmentation (probability)
        }
        
        # –ù–∞–≤—á–∞–Ω–Ω—è –º–æ–¥–µ–ª—ñ
        results = model.train(
            data=config['data'],
            epochs=config['epochs'],
            imgsz=config['imgsz'],
            batch=config['batch'],
            device=config['device'],
            workers=config['workers'],
            project=config['project'],
            name=config['name'],
            patience=config['patience'],
            save=config['save'],
            save_period=config['save_period'],
            verbose=config['verbose'],
            plots=config['plots'],
            **augmentation
        )
        
        print()
        print("=" * 60)
        print("‚úÖ –ù–ê–í–ß–ê–ù–ù–Ø –ó–ê–í–ï–†–®–ï–ù–û!")
        print("=" * 60)
        
        # –û—Ç—Ä–∏–º—É—î–º–æ —Ä–µ–∞–ª—å–Ω–∏–π —à–ª—è—Ö –¥–µ YOLOv8 –∑–±–µ—Ä—ñ–≥ –º–æ–¥–µ–ª—ñ (–º–æ–∂–µ –±—É—Ç–∏ –∑ —Ü–∏—Ñ—Ä–æ—é: train, train2, train3...)
        save_dir = Path(results.save_dir)
        best_model = save_dir / 'weights' / 'best.pt'
        last_model = save_dir / 'weights' / 'last.pt'
        
        print(f"üìÅ –†–µ–∑—É–ª—å—Ç–∞—Ç–∏ –∑–±–µ—Ä–µ–∂–µ–Ω–æ –≤: {save_dir}")
        print(f"üèÜ –ù–∞–π–∫—Ä–∞—â–∞ –º–æ–¥–µ–ª—å: {best_model}")
        print(f"üìä –û—Å—Ç–∞–Ω–Ω—ñ–π —á–µ–∫–ø–æ—ñ–Ω—Ç: {last_model}")
        print()
        
        # –í–∞–ª—ñ–¥–∞—Ü—ñ—è –º–æ–¥–µ–ª—ñ
        print("=" * 60)
        print("üìä –í–ê–õ–Ü–î–ê–¶–Ü–Ø –ú–û–î–ï–õ–Ü")
        print("=" * 60)
        
        metrics = model.val()
        
        print(f"\nüìà –ú–µ—Ç—Ä–∏–∫–∏ —è–∫–æ—Å—Ç—ñ:")
        print(f"  mAP50: {metrics.box.map50:.4f}")
        print(f"  mAP50-95: {metrics.box.map:.4f}")
        print(f"  Precision: {metrics.box.mp:.4f}")
        print(f"  Recall: {metrics.box.mr:.4f}")
        print()
        
        return save_dir, best_model
        
    except Exception as e:
        print(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—ñ–¥ —á–∞—Å –Ω–∞–≤—á–∞–Ω–Ω—è: {e}")
        import traceback
        traceback.print_exc()
        return None, None

if __name__ == "__main__":
    print("""
    ‚ïî‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïó
    ‚ïë     üéØ YOLOv8 Object Detection Training Pipeline        ‚ïë
    ‚ïë          Microsoft COCO Dataset (80 classes)             ‚ïë
    ‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù
    """)
    
    save_dir, best_model = train_model()
    
    if best_model and best_model.exists():
        print("=" * 60)
        print("üéâ –£–°–ü–Ü–•!")
        print("=" * 60)
        print(f"–í–∞—à–∞ –º–æ–¥–µ–ª—å –≥–æ—Ç–æ–≤–∞ –¥–æ –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è: {best_model}")
        print("\n–î–ª—è —Ç–µ—Å—Ç—É–≤–∞–Ω–Ω—è –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–π—Ç–µ —Å–∫—Ä–∏–ø—Ç test_yolov8.py")
    else:
        print("‚ùå –ù–∞–≤—á–∞–Ω–Ω—è –Ω–µ –≤–¥–∞–ª–æ—Å—è. –ü–µ—Ä–µ–≤—ñ—Ä—Ç–µ –ø–æ–º–∏–ª–∫–∏ –≤–∏—â–µ.")
