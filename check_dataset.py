"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ —Å—Ç—Ä—É–∫—Ç—É—Ä–∏ –¥–∞—Ç–∞—Å–µ—Ç—É COCO YOLOv8
"""
import os
from pathlib import Path

dataset_path = r"c:\Users\tankc\YOLO-MultiVisionAI\Microsoft COCO.v2-raw.yolov8"

print("=== –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —Å—Ç—Ä—É–∫—Ç—É—Ä–∏ –¥–∞—Ç–∞—Å–µ—Ç—É ===\n")

# –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –æ—Å–Ω–æ–≤–Ω–∏—Ö –ø–∞–ø–æ–∫
for split in ['train', 'valid']:
    split_path = Path(dataset_path) / split
    
    print(f"\nüìÅ {split.upper()}:")
    
    # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ labels
    labels_path = split_path / 'labels'
    if labels_path.exists():
        label_files = list(labels_path.glob('*'))
        txt_files = [f for f in label_files if f.suffix == '.txt']
        img_files = [f for f in label_files if f.suffix in ['.jpg', '.jpeg', '.png']]
        
        print(f"  Labels –ø–∞–ø–∫–∞: {len(label_files)} —Ñ–∞–π–ª—ñ–≤")
        print(f"    - .txt —Ñ–∞–π–ª–∏: {len(txt_files)}")
        print(f"    - –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è: {len(img_files)}")
        
        if label_files:
            print(f"  –ü—Ä–∏–∫–ª–∞–¥ —Ñ–∞–π–ª—É: {label_files[0].name}")
    
    # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ images
    images_path = split_path / 'images'
    if images_path.exists():
        image_files = list(images_path.glob('*'))
        print(f"  Images –ø–∞–ø–∫–∞: {len(image_files)} —Ñ–∞–π–ª—ñ–≤")
        
        if image_files:
            print(f"  –ü—Ä–∏–∫–ª–∞–¥ —Ñ–∞–π–ª—É: {image_files[0].name}")

# –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞, —á–∏ –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è –≤—Å–µ—Ä–µ–¥–∏–Ω—ñ labels
print("\n\n=== –ê–Ω–∞–ª—ñ–∑ —Ñ–∞–π–ª—ñ–≤ —É labels ===")
labels_path = Path(dataset_path) / 'train' / 'labels'
all_files = list(labels_path.glob('*'))[:20]  # –ü–µ—Ä—à—ñ 20 —Ñ–∞–π–ª—ñ–≤

extensions = {}
for f in all_files:
    ext = f.suffix
    extensions[ext] = extensions.get(ext, 0) + 1
    
print(f"–†–æ–∑—à–∏—Ä–µ–Ω–Ω—è —Ñ–∞–π–ª—ñ–≤ (–ø–µ—Ä—à—ñ 20):")
for ext, count in extensions.items():
    print(f"  {ext}: {count}")

print("\n–ü—Ä–∏–∫–ª–∞–¥–∏ —Ñ–∞–π–ª—ñ–≤:")
for f in all_files[:5]:
    print(f"  {f.name}")
